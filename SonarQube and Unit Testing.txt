name: CI Pipeline with SonarQube and Unit Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }} # Replace with your GCP credentials

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }} # Replace with your GCP project ID
        export_default_credentials: true

    - name: Install Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install kubectl and gke-gcloud-auth-plugin manually
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

        curl -LO "https://storage.googleapis.com/artifacts.k8s-staging-authenticated-image-pulling/releases/latest/bin/linux/amd64/gke-gcloud-auth-plugin"
        sudo install -o root -g root -m 0755 gke-gcloud-auth-plugin /usr/local/bin/gke-gcloud-auth-plugin

    - name: Configure gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin
        gcloud config set container/use_client_certificate False

    - name: Configure kubectl for GKE
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
          --zone ${{ secrets.GKE_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }} # Replace with your GKE cluster details

    - name: Verify kubectl installation
      run: |
        kubectl get pods -n cicd

    - name: Scale SonarQube StatefulSet to 1
      run: |
        kubectl scale statefulset sonarqube-sonarqube --replicas=1 -n cicd

    - name: Wait for SonarQube pod to be ready
      run: |
        while true; do
          STATUS=$(kubectl get pods -n cicd -l app=sonarqube -o jsonpath='{.items[0].status.phase}')
          if [ "$STATUS" == "Running" ]; then
            break
          else
            sleep 10
          fi
        done

    - name: Verify SonarQube readiness
      run: |
        RESPONSE=$(curl -s -o /dev/null -w '%{http_code}' https://your-sonar.example.com/api/system/status) # Replace with your SonarQube URL
        if [ "$RESPONSE" -ne 200 ]; then exit 1; fi

    - name: Install Required Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl unzip postgresql-client

    - name: Install SonarScanner CLI
      run: |
        curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip sonar-scanner-cli.zip
        sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
        sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
        sonar-scanner --version

    - name: Run SonarQube Scanner
      uses: sonarsource/sonarqube-scan-action@v2.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }} # Replace with your SonarQube token
        SONAR_HOST_URL: https://your-sonar.example.com # Replace with your SonarQube URL
      with:
        args: >
          -Dsonar.projectKey=your-project-key # Replace with your SonarQube project key

    - name: Ensure SonarQube Success
      if: success()
      run: echo "SonarQube analysis passed."

    - name: Start Cloud SQL Proxy
      if: success()
      run: |
        curl -Lo cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
        chmod +x cloud_sql_proxy
        ./cloud_sql_proxy -instances="your-instance-connection"=tcp:5432 & # Replace with your Cloud SQL instance
        sleep 5

    - name: Initialize Go Module
      if: success()
      run: |
        go mod init github.com/example/project || echo "Module already initialized."
        go mod tidy

    - name: Run Unit Tests
      if: success()
      run: |
        go test ./... -v
      env:
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }} # Replace with your Postgres host
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }} # Replace with your Postgres port
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}     # Replace with your Postgres database name
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }} # Replace with your Postgres username
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} # Replace with your Postgres password

    - name: Clean Up
      if: always()
      run: |
        pkill cloud_sql_proxy || true
